大規模テスト

大規模テストとは何か
→遅い
    →何時間とか何日とか
→密閉されていない
→非決定性
→何故やるのか
    →システム全体が意図通り動作していることに信頼を提供するため
→忠実性
    →大規模テストが存在する理由の一つ
    →本番環境であれば忠実性は完璧
        →忠実性が低いとやる意味はあまりない
→ユニットテストでよくある不足部分
    →忠実でないテストダブル
        →ユニットテストで使うモックを作成する人はモックの対象となるものを作っているわけではない
            →仕様に対し誤解がある可能性もある
    →設定の問題
        →バイナリがどう実行されるかは自己完結していない
            →ユニットテストでは検証が出来ない場合もある
    →負荷がかかると起こる問題
    →予期しない挙動、入力、副作用
        →ユニットテストは作成者の想像力に制限される
    →ふいに起こる挙動と真空効果
→なぜ大規模テストを備えないのか
    →ユニットテストの特徴
        →信頼性がある
        →高速である
        →スケーラブルである
    →大規模テストの課題
        オーナーシップの課題
        標準化できない
            やる人によって変わってしまう

Googleの大規模テスト
    大規模テストと時間
        コードの期待される存続期間によってテストの類型は変化
    Googleスケールでの大規模テスト
        スケールが大規模であれば大規模テストも必要となる
            複雑性は増大

大テストの構造
    テスト対象システム
        SUTの形式の判定
            密閉性
            忠実性
        密閉されたSUTの利点
            本番環境内テストは人気
                オーバーヘッドが少ないため
                テストはコードが本番環境に届くまでできない
                    手遅れ
                        巨大な共有ステージング環境でやれば問題ない
                問題の境界でSUTの規模を縮小する
                    苦労の多いテスト境界
                        UIテスト
                    関心のあるSUTの対象外のものは排除
    テストデータ
        シードとして与えられたデータ
            テストの初期設定
        テストトラフィック
            テスト中に送信されるデータ
    検証
        手動
            手動でSUTと相互作用を行いSUTが正しく動作するかを確定
        アサーション
            システムの意図された挙動について明示的なチェック
        A/B比較
            SUTのコピーを2つ実行して同じデータを送ったときの比較

大規模テストの類型
    相互に作用しあう1つ以上のバイナリの機能テスト
        SUT
            単一マシンに密閉
        データ 
            手動作成
        検証   
            アサーション
    ブラウザとデバイスのテスト
        相互に作用しあう1つ以上のバイナリの機能テストの特別バージョン
    パフォーマンス、負荷、ストレステスト
        SUT
            クラウド上にデプロイされ分離されている
        データ
            手動作成か本番環境のものを含む多重化されたもの
        検証
            差分
    デプロイ設定のテスト
        SUT
            単一マシンに密閉
        データ
            なし
        検証
            アサーション
    探索的テスト
        SUT
            本番環境か共有ステージング
        データ
            本番環境か既知のテスト領域
        検証
            手動
        新規のユーザシナリオを試行して不審な挙動を探す
        制限事項
            人的時間を要する
        バグバッシュ
            会議としてかかわる全員が手動でテストを行う
    A/B差分リグレッションテスト
        SUT
            クラウド上にデプロイされ分離されている2つの環境
        データ
            本番環境のものを含む多重化されたデータ
        検証
            A/B差分比較
        制限事項
            承認
                良い悪いが明確でないので手動となる
            ノイズ
                予期しないノイズは手動調査
            カバレッジ
                必要なトラフィックを作るのが困難
            構成
                かなり困難
    ユーザー受け入れテスト
        SUT
            単一マシンに密閉
        データ
            手動作成
        検証   
            アサーション
        意図された挙動にたいしての誤解を解消させる
    プローバーとカナリア分析
        SUT
            本番環境
        データ
            本番環境
        検証
            アサーションとA/B差分
        制限事項
            問題が起きれば全てのユーザで起きている
    障害復旧とカオスエンジニアリング
        SUT
            本番環境
        データ
            本番環境とユーザの手動作成
        検証
            手動とA/B差分
        システムが予期しない変更または障害にどれだけ反応できるかのテスト
        制限事項
            問題が起きればすべてのユーザで起きている
    ユーザ評価
        SUT
            本番環境
        データ
            本番環境
        検証
            手動またはA/B差分

大テストと開発者のワークフロー
    大テストの作成
        大テストを書けるようにするには
            明確なライブラリー、ドキュメント、テストコード例を備える
        リソースと人的時間のコストが高い
            全体的に見るべき
    大テストの実行
        テストの高速化
            頻度を上げる
            イベントハンドラーの実装
            通知システムに通知できるようにする
        信頼不能性を排除する
            テストを他に反応して動作させる
            イベント駆動にする
        テストを理解可能にする
            失敗しているのが何かを明確にする
            不一致の根本原因を特定するために要する労力を最小化する
            サポートとコンタクトの情報を提供する
    大規模テストのオーナーとなる
        オーナーシップを欠く
            テストの変更と更新が難しくなる
            テストの失敗の解決に時間がかかるようになる

用語
SUT
テスト対象システム