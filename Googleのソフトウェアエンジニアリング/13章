テストダブル

テストダブルのソフトウェア開発への影響
→テスト可能性
    →テストダブルと本物の実装を取り換えられるようにすべき
→応用性
    →不適切に利用してテストを脆くしないように
→忠実性
    →テストダブルを本物の実装にどれだけ近づけるか

基本概念
→シーム
    →コードがユニットテスト可能である
        →テスト可能
    →テストダブルを利用することでコードをテスト可能とする方法
        →ディペンデンシーインジェクション
            →シームを導入する一般的な方法
→モッキングフレームワーク
    →テストダブルをテスト内で用意に作成可能にしてくれるライブラリ

テストダブル利用のためのテクニック
→フェイキング
    →フェイク
        →本番環境へは適していないが本物の実装同様に振る舞うＡＰＩの軽量な実装
        →テストダブルを使う場合の理想
        →書くのは難しい
→スタビング
    →挙動を与えられなければそれ自体は何も挙動しないものに挙動を与えるプロセス
    →基本的にはモッキングフレームワークを利用する
→インタラクションテスト
    →関数がどのように呼び出されるかを実際に関数の実装を呼び出さず検証する
    →脆いテストになりがちなので出来る限り避けるべき

本物の実装
→テストダブルは有用だが第一の選択は本物の実装
→分離より現実に即することを優先せよ
    →本物の実装の中のコード全てがテスト中に実行される
        →テスト対象はより現実に即したものとなる
→いつ本物の実装を使うべきか決める方法
    →本物の実装が優先されるのはそれが高速で決定性でもっている依存関係が単純な場合
    →実行時間
        →ユニットテストは高速であるべき
    →決定性
        →あるバージョンのシステムにたいしテストが常に同じ結果となる
            →テストが決定性である
    →依存関係の構築
        →テストダブルの場合は簡単

フェイキング
→何故フェイクが重要なのか
    →フェイクの実行は高速で欠点なしに効果的にコードをテストできる
→どんな場合にフェイクが書かれるべきか
    →フェイクは本物同様保守が必要
        →利用することと作成することのコストが合うか
→フェイクの忠実性
    →フェイクの作成をめぐる最も重要な概念は忠実性
        →完全な忠実性は実現可能ではない
→フェイクはテストされるべきである
→フェイクが利用できない場合はどうするか
    →APIのオーナーに作成依頼を出す
        →書いてくれないなら自分で書く

スタンビング
→スタンビングを使いすぎることによる危険
    →テストが不明確となる
        →スタブ化される関数の定義のためのコードが余分
            →明確さがそがれる
    →テストがもろくなる
        →APIの変更に対しスタブ変更も行う必要がある
    →テストの効果が落ちる
        →スタブが本物と同様に動作するかの保証は無理
    →スタンビングが適切な場合はどの場合か
        →テスト対象システムをある状態に遷移させるために関数が特定の値を要求する場合

インタラクションテスト
→インタラクションテストよりステートテストを優先せよ
→インタラクションテストが適切な場合はどんな場合か
    →本物の実装、またはフェイクが使えないのでステートテストが行えない場合
    →関数への呼び出し回数や順序が望ましくない挙動を起こす場合


用語
テストダブル
テスト内で本物の実装の代役を務めることができるオブジェクトまたは関数
ディペンデンシーインジェクション
依存関係の注入