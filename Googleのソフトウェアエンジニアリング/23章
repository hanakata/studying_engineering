継続的インテグレーション

CIの概念
    高速なフィードバックループ
        バグが見つかるまでのタイミングが遅くなればなるほどコストは増大
            最小化する方法として高速なフィードバックループの利用
        アクセス可能かつ行動可能なフィードバック
    自動化 
        開発関係のタスクを自動化することでエンジニアリングリソースの節約
        継続的ビルド
            変更はあればテスト
                全て問題なければグリーン
                    細心の変更がグリーンヘッド
        継続的デリバリー
            最初の段階は自動リリース
            リリース候補
                デプロイ可能な単位で自動化されたプロセスで作成
            継続的デリバリー
                リリース候補の継続的な組み立てとそれに続く組み立てられたリリース候補に対する一連の環境群を昇格していく中で終始行われるテスト
            何故リポジトリ提出前のテストでは十分ではないのか
                全てのテストを提出前にやるにはコストが高すぎる
                    時間の長さ
                    自身の環境と本番環境のズレ
            リポジトリ提出前対リポジトリ提出後
                リポジトリ提出前にやるテストは高速で信頼性の高いテストのみ実行
            リリース候補のテスト
                実施する理由
                    健全性チェック
                    監査可能性
                    チェリーピックを許容するため
                    緊急プッシュのため
            本番環境のテスト
    CIの課題
        リポジトリ提出前テストの最適化
        犯人捜しと失敗の切り分け
        リソース上の制約
    密閉されたテスト
        完全に自己完結的なテスト環境に対して実行されるテスト

用語
継続的インテグレーション
事故の属する複雑かつ高速に発展するエコシステム全体の継続的な組み立てならびにテスト