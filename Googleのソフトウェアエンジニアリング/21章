依存関係管理

何故依存関係管理がそれほど難しいのか
    競合する要件群とダイアモンド依存関係
        バージョン不適合問題のほとんどがダイアモンド依存関係

依存関係のインポート
    互換性の約束
        C++
            ほぼ無期限の後方互換性を持つ
        Go
            バイナリの互換性は約束されていない
                バージョン違いだとコンパイルできないかもしれない
    インポートを行う際に考慮すべき事項
        インポートする方が楽ではある
        インポートする場合の質問事項
            実行可能なテストがあるか
            テストは合格するか
            誰が依存関係を提供しているか
            どんな類の互換性をそのプロジェクトは目指しているか
            どんな類の利用法についてサポートが期待されるか
            そのプロジェクトの人気はどの程度か
            それだけの期間依存するか
            どのくらい頻繁に破壊的な更新を行っているか

理論上の依存関係管理
    何も変化しない
        依存関係を変更しない
            安定が保証される
                ただし正当であると決められる期間を明確に示すことはできない
        セマンティックバージョニング
            3つの整数を使ってある依存関係のバージョン番号を示す方法
                絶対的な解ではない
                    ダイヤモンド依存関係の発生
        バンドルされたディストリビューションのモデル
        リブアットヘッド

SemVerの制限
    SemVerは依存関係の事実上の標準
    SemVerは過大に制約を課す可能性がある
    SemVerは過大に約束をする可能性がある
        理論上安全でも実際には破壊的になっていることもある

無限のリソースがある場合の依存関係管理
    SemVerに依存する理由
        ローカルな情報のみを要求する
            API提供者は下流ユーザを知る必要がない
        テスト、実行するリソース、監視するCIシステムが利用できることが前提ではない
        既存のプラクティス
    依存関係のエクスポート
        利用される側の管理はどうするか
            管理しない
                評判が落ちる
            善意のリソース
                ブランチ間での同期を保てない
            コストは高くつく


用語
ダイアモンド依存関係
あるライブラリがそれぞれ別のライブラリから呼び出されておりそのライブラリ全てをまた別のライブラリからよびだしているような状態