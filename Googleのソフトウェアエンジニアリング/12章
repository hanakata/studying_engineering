ユニットテスト

保守性の重要性
→保守されていないテスト
    →脆い
    →不明確

脆いテストを防ぐ
→脆いテスト
    →バグを持ち込んでいないのに失敗するテスト
→変化しないテストを目指す
    →理想のテスト
        →変化しないテスト
    →変化とは？
        →純粋なリファクタリング
        →新機能
        →バグ修正
        →挙動の変更
→公開API経由のテスト
    →変化する必要がないことを保証するためには
        →テスト対象のシステムユーザと同じように呼び出す
            →これで破綻するならユーザが利用しても破綻する
→相互作用ではなく状態をテストせよ
    →ステートテスト
        →システム自体を観察してシステムのメソッドを呼び出した後システムの状態をチェック
            →結果が何であるかのチェック
    →インタラクションテスト
        →システムが呼び出しに応じて期待される一連の動作を協調動作の対象に行ったかチェック
            →どのようにのチェック
    →インタラクションテストの方がステートテストより脆い

明確なテストを書く
→テスト失敗の理由
    →テスト対象システムに問題がある
    →テスト自体に欠陥がある
        →テストが失敗した場合どちらか判断し対応する必要がある
            →速度を上げるには？
                →テストの明確性
                    →時間の経過とともに重要となる
→テストは完全かつ簡潔にせよ
    →完全
        →テストの結果にどう到達するかの全情報が含まれている
    →簡潔
        →紛らわしい、無関係な情報が含まれていない
→メソッドではなく挙動をテストせよ
    →すべての本番環境向けメソッドが対応するテストを試す
        →最初は可能だが時間とともに問題となる
    →挙動向けにテストを書く
    →挙動を協調するようにテストを構成せよ
    →テストされる挙動にちなんでテストを命名せよ
→テストにロジックを入れるな
    →テストにif、ループなどの複雑性を組み込まない
→明確な失敗メッセージを書け

テストとコード共有
→テストコードはDRYではなくDAMPを目指すべき
    →テストにDRYの恩恵はほぼない
→共有値
    →定数を共通化したい
        →テスト作者が関心のある値のみ指定を要求。それ以外はデフォルト
            →ヘルパーメソッドを作成する
→初期設定の共有
    →初期設定メソッドの最良ユースケース
        →テスト対象オブジェクトとその協調動作対象オブジェクト群を構築する
→ヘルパーメソッドと検証メソッドの共有
→テストインフラストラクチャーを定義する
    →テストインフラストラクチャーはそれ自体のテストを常に備えていなければならない

用語
DAMP
説明的かつ意味が分かりやすい言い回し