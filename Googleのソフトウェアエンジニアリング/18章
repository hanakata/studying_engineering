ビルドシステムとビルド哲学

ビルドシステムの目的
    優れたビルドシステム
        速い
        ただしい
    ビルドシステムがないと何が起きるか
        スケーリング上の問題が起きる
        でも必要なのはコンパイラだけ
            小さければコンパイラだけで良い
                大きくなると依存関係の解決が必要となる
                    コンパイラは依存関係を扱うことはできない
                        ビルドシステムが必要となる
    シェルスクリプトは救援となるか
        冗長になる
        遅い
        リリースが面倒
        障害時も面倒
            スケールの問題
現代的ビルドシステム
    依存関係こそ全て
        自分のコードは簡単だが依存関係の管理は難しい
    タスクベースのビルドシステム
        シェルスクリプトの代わりにビルドファイルを作成することとなる
            XMLで書かれることが多い
            タスクベースのビルドシステムの暗黒面
                エンジニアに権力を与えビルドシステムに十分な権力が与えられていない
            ビルドステップの並列化の難しさ
            インクリメンタルなビルド実行の難しさ
            スクリプトの保守とデバッグの難しさ
                細かく確認されない
                    デバッグできない
    アーティファクトベースのビルドシステム
        何をビルドするか
            エンジニアが命令
        どのように実行するか
            システムに任せる
        関数的観点
            アーティファクトベースのビルドシステムと関数型プログラミングで類推するのは簡単
    分散ビルド
        リモートキャッシュ保存
            最も単純な類型
        リモート実行
            真のゴールはリモート実行をサポートすること
    時間、スケール、トレードオフ
        DIYを選ばずタスクベースのビルドシステムを選択
            スケールしやすくなる
            スケールを続けると合わなくなる
                アーティファクトベースのビルドシステムを使うことで矯正できる

モジュールと依存関係を扱う
    粒度の細かいモジュールの利用と1:1:1ルール
        アーティファクトベースのビルドシステムの問題
            個々のモジュールが含む機能量の決定
                小さくなる傾向はある
                    利点はスケールしやすさ
    モジュールの可視性の最小化
        可視性を可能な限り最小化するのが最善
    依存関係の管理
        内部的依存関係
        外部的依存関係
        


用語