3.アジャイルなチームの原理

日本は構造的にアジャイル開発が向いていない。
アジャイル開発の主流な方法論の1つであるスクラムの理解者であるスクラムマスター等の資格取得者もあまりいない。
不確実なことを避けてしまう文化傾向＝アジャイル開発のハードルとなる
アジャイル開発は3倍の成功率と1/3の失敗率という統計が出ている。

マネジメント＝対象となるものの資源、資産、リスクを管理し効果を最大化する手法
プロジェクト＝終了することが目的。なので終了しないことがリスク
→対処すべき確実性：方法不確実性
プロダクト＝プロダクトが継続的に収益を上げて損益分岐点を超えて発展することで終了しないことが目的。なので終了することがリスク。
→対処すべき確実性：目的不確実性

ソフトウェア開発は計画駆動型からマーケット駆動型へ移行していくにつれて開発手法も変わる。
進めながら目的不確実性も方法不確実性も減少させていくアジャイル開発のほうが
現在のソフトウェア開発には向いている。
アジャイル開発はチーム全体をメンタリングするための方法論
チーム全体をメンタリングするとは？
チームが総体としてチーム自体のゴールに対して高いゴール認識をもち
チーム自体がチームをメンタリングしている状態を目指すこと

アジャイルの状態を目指すべき
アジャイルな状態とは？
・情報の非対称性が少ない
・認知の歪みが少ない
・チームより小さい限定合理性が働かない
・対人リスクをとれていて心理的安全性が高い
・課題、不安に向き合い不確実性の削減が効率よくできている
・チーム全体のゴール認識レベルが高い

そもそもウォーターフォールかアジャイルかを選択することは
同質のものではないため比較ができない。

エンジニアリングを方法不確実性の削減だと狭くとらえると目的不確実性と通信不確実性が
形を変えて方法不確実性の増大を引き起こす。
また狭くとらえてしまうことで何を作るか考える人とどのように作るかを考える人の切断に伴う弊害が出てくる。

スクラム＝振り返りのためのフレームワーク
→基本的には計画と振り返り

リーンソフトウエア開発の原則
１．全体を最適化する
２．無駄をなくす
３．チームに権限を委譲する
４．学習を強化する
５．早く提供する
６．品質を作りこむ
７．決定を遅らせる

今までの開発とこれからの開発への変化
プロセスやツール→個人と対話
包括的なドキュメント→動くソフトウェア
契約交渉→顧客との協調
計画にしたがうこと→変化への適応
これは答えではなく問いであるので正解ではない。

従来はソフトウェアへの無理解からくる無計画な追加要求から守るために
計画の基づいた契約遂行を目指していたが、それだと必要のないものが
できるパターンも多くあったので変化する必要がある。

アジャイルに対しての誤解
・決まったプロセスである
→アジャイルなチームを作る方法論であり、複数の軽量開発プロセスの総称。
　顧客の課題に対し最もフィットするものを提供することが重要
・設計をしない
→不必要な設計文書は作成しない。ただ必要がある設計文書は作るべき。
・優秀なメンバーが必要
→組織学習をプロセスに組み込んでいるので、最初から優秀な人が必要なわけではない。
・中長期計画がない
→計画は立てる。また柔軟に変更していく。
・開発者に決定権がある
→ビジネスサイドから抽象的な形で要求を定義したうえで開発を進めるので開発者に決定権があるわけではない。

アジャイルに対する言葉の意味はそれぞれ以下
アジャイル＝目的地
アジャイルなチーム＝目的地に向かう集団
アジャイルな方法論＝目的地に向かうための考え方
アジャイル開発＝目的地に向かう特定の移動手段
アジャイル開発手法＝移動手段の手引書に書かれていること

アジャイルとは理想的な状態のこと。
理想的な状態とは分からないことが減少していること。
アジャイルな方法論とは？
・不安に向き合うこと
・少人数の対話を重視する
・役割を分けない
・経験のみを知識に変える
・価値の流れを最適化する

