第4章 学習するチームと不確実性マネジメント
■いかにして不確実性を管理するか
不確実性は以下3つに分けられる
・方法不確実性
・目的不確実性
・通信不確実性
これらを継続的に削減するための仕組みがあれば物事は進む。

■スケジュール予測と不確実性
時間は早く終わることが重要なのではなくどのくらいの時間がかかりそうか正確に知ることが重要

スケジュールマネジメントはクリエイティブで科学的知識と洞察力両方が必要。
スケジュール不安は方法不確実性が源。

スケジュールは単純に考えると以下
総作業時間/人数＝必要な期間
ただこれは必ず失敗する。
スケジュールマネジメントは以下3つに注目して改善を行うマネジメント。
・制約スラックを削減する
・見積の予測可能性を上げる
・プロジェクトバッファの消費を可視化し改善する

理想工数と実際の工数がずれる原因は作業と作業の間の依存関係。
→Aの作業が終わってなければBの作業にいけないというもの。
　これが元で発生する無駄が制約スラック
依存関係から導かれるスケジュール遅延の原因となる作業の流れをクリティカルパスと呼ぶ。
制約スラックを削減するためには？
リソース制約と依存制約を取り外していくこと。

リソース制約とは属人化した作業
依存制約とは作業同士の依存関係
重要なことは制約スラックを見えるようにしてそれがどんな原因で起きているか考え、アイデアを出すこと

見積を考えるときやったことないことは不安につながる。
なのでプリンシパルエージェント理論が役に立つ。
プリンシパルエージェント理論とは？
経済における人間関係を依頼者と代理人との契約の束として捉える考え方。
普通にやれば商取引だが代理人がうそをつけばその分得できる状況でもある。
こうなると適正価格が上がる。通常の金額と上がった適正価格の差額をエージェンシースラックと呼ぶ。
嘘をつかせないためには監視するかインセンティブを払う必要がある＝コントロールコスト
嘘をつかないと信じてもらうためのコスト＝シグナリングコスト

見積は予測であるにも関わらずノルマになりがち。
ノルマにした途端に過負荷になりクオリティが下がる。なので守るために悲観的見積を行うようになる。

スケジュールにとって重要なのは間に合う、間に合わないではなくスケジュール予測が収束していくかどうか。
スケジュールを正しく予測するためにやれることはまず各工程に無意識に積まれたバッファをなくし
それぞれのタスクではなく全体で50%のバッファを持つようにすると25%の節約になる。
また個別のタスクに対して複数のパターンの見積を行うという方法が存在する。

また多点見積として、平均値と最悪値を見積もってその偏差2つ分の違いがあるとする方法や
最頻値、最悪値、最も最悪値の3点で見積もる方法もある。
それぞれのタスクについて不安量が多いものを先にやること。
ランダムにやると不安量が少ないものばかりに手を付けがちになり結局不安量はそれほど下がらない。
結果スケジュールが遅れることにつながる。

不安量の大きいタスクは解体すること。
解体する方法は以下。
概念検証
→サンプルコードでどう動くか確認する。
継続的インテグレーション
→いつでもテストできるようにすることで既存ソースに影響がないことを確認しながら進めていく。
プロトタイピング
→コードを一旦捨てる方針でまず作ってみる。

チームの成熟度やスケジュールの不安、要求仕様の不確実性を考慮して見積方法を選択する。
・Tシャツサイズ見積もり
→ざっくり見積もる
・ストーリーポイント見積
→一番小さい見積を2として相対的な値で見積を行う。
・理想日見積
→理想的な一日を想定して見積を行う
・実時間見積
→営業日数や稼働時間を考慮して見積もりを行う。

スケジュールは実績から推定する方が良い。
アジャイルの場合は小さい開発サイクルで区切られる。
→スプリントと呼ぶ。
スプリントごとに実績から予測することによってどのくらいで終わるか予測しやすくなる。
例
100のストーリーポイントのタスクがあって直近のスプリントでは20のストーリーポイントを
実行した場合5スプリントの期間で終わるだろうという予測。
スプリントごとにどれだけの実績をだせたか＝ヴェロシティ
ヴェロシティで測定することでチームの健康状態を測ることができる。
ヴェロシティが低いからといって外部から改善しようとするのは間違いであり、そもそも無理。
なので内部の人が改善できるようメンタリングを行うしかない。

実績値があまりないチームであればビルディング期間が終わるまではゲタをはかせてみるのも1つ。
見積もりについては多点見積を導入すること。2点は最悪のスプリントと平均のスプリント。
進めていくことで差が縮まるので不安は少なくなる。

ブレ幅が大きくなるのは工程よりも何を作るかが決まっていく過程が最も多い。
粒度が大きく曖昧な要求は不確実性が高いものとみなし詳細化していく必要がある。
プロジェクトの進め方は以下の通り
１．顧客の課題を特定し仮説検証戦略を作る
２．開発要求を固める
３．開発を行う
４．テストをする
５．リリースする
６．効果検証を行う
この中でどこがボトルネックになっているかを調べる。

■要求の作り方とマーケット不安
何を作るかが不確実＝目的不確実性
→マーケットに対する不安につながる。
プロジェクトは2つに分けられる。
・時間境界型プロジェクト→納期が決まっているプロジェクト
・機能境界型プロジェクト→必要な機能が決まっているプロジェクト
状況に応じてできている機能をリリースするスコープバッファは単純ではない。
→優先順位の高いものから実装する必要があるため。

開発はストーリで考えることで無駄な機能作成を防げる。
仮説から一番の不安材料を洗い出し顧客に当てることではじめて仮説の不確実性が削減される。

■スクラムと不安に向き合う振り返り
不確実なものを減らすには一番不確実なものから始めること。
失敗するので振り返りは必要。それに向いているのがスクラム

スクラムにおける役割
・プロダクトオーナー
→ストーリを優先順位順に並べたプロダクトバックログを作成する。
・開発チーム
→プロダクトバックログにしたがってどう作るかの決定権を持っている
・スクラムマスター
→ボトルネックを解消する役割
スクラムでの振り返りを実施するときはメンバー全員を参加させ、
チームの誰かひとりが不安を抱えてしまう状況をすばやく検知できるようにすること。

振り返りを行う場合、ゴールを明確にすること。
そうしなければどこに向かって振り返るかが決定できない。

不安は何かと聞いたところで何も出てこない。
必要なのはゴール認識レベルを上げること。それを上げることで不安材料が明確になる。
明確になれば行動に移せる。