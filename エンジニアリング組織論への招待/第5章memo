第5章 技術組織の力学とアーキテクチャ

■何が技術組織の生産性を下げるか
生産性＝付加価値額/従業員数
この定義においてエンジニアは技術組織といった企業における1要素の付加価値が分からないので
エンジニアの生産性というのは不明。
しかもソフトウェアを作成した場合、作成するまでは難しいがコピーするのは簡単。
なので作成するまでは生産性が低いとされ、作成後は生産性が高くなるので組織の効率性を表す言葉には合わない。

組織の情報処理能力
労働生産性＝ビジネスの結果を分析する手法
生産性という概念に近づけていくには偶然上手くいったケースと必然的に上手くいったケースを差別化できる方が良い。
不確実性の削減＝情報を生み出すこと

情報処理モデル
不確実性の高さ＝情報処理必要量の多さ
情報処理能力が上回れば組織成果につながる。
個人の情報処理能力の総和は組織全体の情報処理能力にはならない。
すべての能力を発揮するためにはコミュニケーションが100%伝達できるようになる必要がある。
ただ100%は不可能。
理想的な情報処理能力の推移と現実の情報処理能力の推移の差がコミュニケーションコスト
この差を減らす必要がある。
大体20名くらいが限界。
コミュニケーションに大事なのは発信と到達だけではなく正しく受信されたかの確認が不可欠。
それらには限界があるので情報の非対称性が発生する。

コンウェイの法則
システムを設計する組織はその構造をそっくりまねた構造の設計を生み出してしまう

システム構築をしていく組織における情報処理能力を考えるにあたって重要な点は人間同士の関係性の問題。
エンジニア組織の改善に必要なこと＝組織全体のコミュニケーションの改善。

■権限委譲とアカウンタビリティ
1人が考えて多数の人が実行するという組織の情報処理能力には限界がある。
なので組織の人数に応じて適切に権限の委譲を行う必要がある。

権限に対しては適切な責任を設定すること。それが出来なければ権限に見合った行動は起きない。
情報処理能力が低い組織＝権限が一部に偏っていて指示が細かくされる組織
情報処理能力が高い組織＝正しく権限が委譲されている状態。指示は抽象的でも問題なく運用される。

責任と権限は衝突する。
衝突はそれぞれ上位組織によって解決が促されるもの。
権限と組織設計のポイントは以下
・明示的な権限と責任の委譲を行う
・権限と責任の不一致をなくす
・権限同士の衝突を最小にする
・権限の衝突解消レベルを最小にする

■技術負債の正体
早さを求めて構築されたシステムの構造的な課題＝技術的負債といわれている。
技術的負債が増えていく状況＝ジェンガ
経営者からすると技術的負債という言葉が理解しづらい。
やる前から負債になる、ならないの判断は実質不可能。
綺麗なコードは技術的負債になりにくいだけでならないわけではない。
また技術的負債はエンジニアからすると見えるものだがシステムを見ているだけの人には見えないもの。
その情報の非対称性が技術的負債が問題となる最大の理由。
技術的負債を返していくには累計工数、追加機能見積、改善後見積、差分を出し
全体のコストを把握すること。
技術的負債もコミュニケーションミスの累積であり組織的な構造の問題。
技術的負債は見えてしまえばただの非機能要件。
技術的負債はアーキテクチャの複雑性につながるもの。
複雑性を可視化する方法は以下
・循環的複雑度の可視化・・・循環的複雑度という指標を利用。関数の分岐やループの複雑性を数値化。
・不安定性の可視化・・・モジュールが外部モジュールに依存している数。
・コードチャーン分析・・・コードを誰がどのように修正してきたかの関係性から要素を見つける。

非機能要件は可視化すること。

■取引コストと技術組織
取引コスト理論でコストとされるものは以下
・探索のコスト
・交渉のコスト
・監督のコスト

取引コスト＝市場からリソースを手に入れるコスト
内部化コスト＝企業内部で構築するためのコスト
発注者能力が低ければ取引コストは高くなる。

■目標管理と透明性
目標管理の本来の目的
→自身が明確なゴールを定めその実現に向けたゴール認識を上げていくこと
目標＝ノルマになりがち。そうなるとセルフコントロールされなくなる。
目標の管理を行う手法、OKR。
OKRはオブジェクトとして目標を掲げてその結果をどのような変化がある程度定量的に判断されるかをKeyResultで明示するもの。
明示数は最大で3つ。
これをやると目標管理ができるだけでなく透明性も重視できる。
透明性が上がれば自分が何をやればよいかが明確になる。

■組織設計とアーキテクチャ
目標が明らかで権限が十分に与えられ実現可能のチームがある＝活発に動ける。
その逆は活発に動けない＝よくない組織構造＝よくないシステムが出来上がる。
最近ではアーキテクチャの問題をエンジニアリング組織だけで対処せずビジネスの課題からモデルを作成しアーキテクチャを作成して
組織設計を行う流れができている。
ビジネスの各要件に対してチームを編成しそれぞれのアーキテクチャの接続はAPIで実施する＝マイクロサービスアーキテクチャ
マイクロサービスアーキテクチャの条件は、まずプロダクトを支えるビジネスの戦略が固まっており仮説検証が終了していること。

組織の問題が個人の問題になりがち。
それに対し構造上の問題が根本的な原因であると気づけば人同士の対立は消滅する。